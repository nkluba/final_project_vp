<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        QEpRAQCkFBUAQEpRAQCkFBUAQEpRAQCkFBUAQEpRAQCkFBUAQEpRAQCkFBUAQEpRAQCkFBUAQEpRAQCk
        FBUAQEpRAQCkFBUAQEpRAQCkFBUAQEpRAQCkFBUAQEpRAQCkFBUAQEpRAQCkFBUAQEpRAQCkFBUAQOqW
        olpO5xfz5Xib6em2ObmctYPnAABHop00w6Laduv9ZjfeoWsPq2bf94PnAABHYnW+GBaVT/0AAB7E96gA
        AFKKCgAgpagAAFKKCgAgpagAAFKKCgAgpagAAFKKCgAgpagAAFKKCgAgpagAAFKKCgAgpagAAFKKCgAg
        pagAAFKKCgAgpagAAFKKCgAgpagAAFKKCgAgpagAAFKKCgAgpagAAFKKCgAgpagAAFKKCgAgpagAAFKK
        CgAgpagAAFKKCgAgpagAAFKKCgAgdUtRLafzi/lyvM30dNucXM7awXMAgCPRTpphUW279X6zG+/QtYdV
        s+/7wXMAgCOxOl8Mi8qnfgAAD+J7VAAAKUUFAJBSVAAAKUUFAJBSVAAAKUUFAJBSVAAAKUUFAJBSVAAA
        KUUFAJBSVAAAKUUFAJBSVAAAKUUFAJBSVAAAKUUFAJBSVAAAKUUFAJBSVAAAKUUFAJBSVAAAKUUFAJBS
        VAAAKUUFAJBSVAAAKUUFAJBSVAAAKUUFAJBSVAAAKUUFAJBSVAAAKUUFAJC6paiW0/nFfDneZnq6bU4u
        Z+3gOQDAkWgnzbCott16v9mNd+jaw6rZ9/3gOQDAkVidL4ZF5VM/AIAH8T0qAICUogIASCkqAICUogIA
        SCkqAICUogIASCkqAICUogIASCkqAICUogIASCkqAICUogIASCkqAICUogIASCkqAICUogIASCkqAICU
        ogIASCkqAICUogIASCkqAICUogIASCkqAICUogIASCkqAICUogIASCkqAICUogIASCkqAICUogIASCkq
        AICUogIASN1SVMvp/GK+HG8zPd02J5ezdvAcAOBItJNmWFTbbr3f7MY7dO1h1ez7fvAc4P/L++s3gycA
        I63OF8Oi8qkfAMCD+B4VAEBKUQEApBQVAEBKUQEApBQVAEBKUQEApBQVAEBKUQEApBQVAEBKUQEApBQV
        AEBKUQEApBQVAEBKUQEApBQVAEBKUQEApBQVAEBKUQEApBQVAEBKUQEApBQVAEBKUQEApBQVAEBKUQEA
        pP4HRfWyOevnkwcV1dvLTftsut/uBs/v9rKd96t/DB7ezaHKocKhyqHCocqhwqHKoeLbDi1mL54/a4qz
        H598Lqrr6+vyj7MnT369fj34ha95OZuXXym7/Gk5+E9fU9748aPH5VeeTZ6+34x978+Hfh77P5BDlUOF
        Q5VDhUOVQ4VDlUPFtx2aT5/XQ592U1Rlr169Kv8unfXr9ZvBrw386/Uv5+2s/n7d5c/d4Gf+6O36+vGj
        Rze/cHr69Gxy73s7VDlUOFQ5VDhUOVQ4VDlU/HmH/vlu1kzLD89msw8fPtSIqrspqrIxUVXe+MXztvzY
        fD4vf+j9+/dnZ2fln3e/d3njR7+vFNynQ0/Pzu54b4cqhwqHKocKhyqHCocqh4o/79B/cqoeKr/15T4X
        Vdl6vS4/97WoKn/oyzeuv1LeezKZ3PHeu/VVfePdbld/pezu93aocqhwqHKocKhyqHCocqj4Mw/dkVNl
        /1VUZV+LqvKH6qeGL168GPyhT++9/unvX/5K8fGNf/hh8MZ19VB57183DjnkkEM3c6jMoTqHyhyq+x4O
        1Zz646FPGxZVWf1zX0bVHW9cV9776dOng/d+/aqvb/z27dubn/vv1UOTJ5/f2yGHHHLIoTKH6hwqc6ju
        rz10b06V3VJUZX3fl9+sUXXvG9ft9/sv3/veN66rh+p7O+SQQw7VOVTmUJ1DZQ7V/VWHxuRU2e1FVVb/
        3ONHj378/f9V+PLly5v/8PV9eu+nP378Rti9b1znUJlDdQ6VOVTnUJlDdQ6VOVT3PR/6alGV1T9Xtlgs
        bh7dt/Lez549K79SXuLdu3c3T++bQ2UO1TlU5lCdQ2UO1TlU5lDdd3vorqIqu7q6Gv/GdYfD4fnz5+Pf
        uM6hMofqHCpzqM6hMofqHCpzqO77PHRPUZmZmZnZPfvtt38DOx2g2Fv5CDgAAAAASUVORK5CYII=
</value>
  </data>
</root>